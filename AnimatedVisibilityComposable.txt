@Composable
fun AnimatedVisibilityComposable() {
    var isVisible by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Button(onClick = {
            isVisible = !isVisible
        }) {
            Text(text = "Click For Animated Visibility")
        }

        Spacer(modifier = Modifier.height(20.dp))

        // Image Animation
        AnimatedVisibility(
            visible = isVisible,
            enter = slideInVertically(
                initialOffsetY = { -it },
                animationSpec = tween(durationMillis = 2000)
            ) + fadeIn(
                animationSpec = tween(durationMillis = 2000)
            ),
            exit = slideOutVertically(
                targetOffsetY = { -it },
                animationSpec = tween(durationMillis = 2000)
            ) + fadeOut(
                animationSpec = tween(durationMillis = 2000)
            ),
            modifier = Modifier.fillMaxWidth()
        ) {
            Image(
                painter = painterResource(id = R.drawable.ic_launcher_foreground),
                contentDescription = "Sample Image",
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp)
                    .background(Color.Red)
            )
        }

        Spacer(modifier = Modifier.height(10.dp))

        AnimatedVisibility(
            visible = isVisible,
            enter = slideInVertically(
                initialOffsetY = { it },
                animationSpec = tween(durationMillis = 2000)
            ) + fadeIn(
                animationSpec = tween(durationMillis = 2000)
            ),
            exit = slideOutVertically(
                targetOffsetY = { it },
                animationSpec = tween(durationMillis = 2000)
            ) + fadeOut(
                animationSpec = tween(durationMillis = 2000)
            ),
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(
                text = "This is a sample text",
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
                    .background(Color.Blue)
                    .padding(8.dp),
                color = Color.White,
                textAlign = TextAlign.Center
            )
        }
    }
}

